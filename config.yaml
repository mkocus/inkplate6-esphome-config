# ----------- ESPHOME BASE CONFIG ------------

esphome:
  name: inkplate
  platform: ESP32
  board: esp-wrover-kit
  includes: 
    - helpers.h

# Enable logging
logger:

# Wifi config
wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  fast_connect: true

  manual_ip:
    static_ip: 192.168.50.211
    gateway: 192.168.50.1
    subnet: 255.255.255.0
    dns1: 192.168.50.1

# MQTT config
mqtt:
  broker: 192.168.50.201
  client_id: inkplate
  username: mqtt_user
  password: !secret mqtt_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  # ap:
  #   ssid: !secret wifi_fallback_ssid
  #   password: !secret wifi_fallback_password

# Enable fallback hotspot portal
# captive_portal:

# Enable Home Assistant API
# api:

# Enable OTA
# ota:

# Enable I2C
i2c:

deep_sleep:
  id: deep_sleep_1
  run_duration: 20s
  sleep_duration: 1min
  wakeup_pin:           # touchscreen interupt on LOW
    number: GPIO36
    inverted: true

# ---------- GLOBALS -------------

# variables
globals:
  - id: global_temp_outside
    type: float
    initial_value: "-1000.0f"
    restore_value: yes
  - id: global_fresh_start
    type: bool
    initial_value: "true"
  # - id: global_time_to_wifi
  #   type: float
  # - id: global_time_to_api
  #   type: float
  # - id: global_saved_ttwifi
  #   type: float

# fonts
font:
  - file: "fonts/Helvetica.ttf"
    id: helvetica_96
    size: 96
  - file: "fonts/Helvetica.ttf"
    id: helvetica_48
    size: 48
  - file: 'fonts/materialdesignicons-webfont.ttf'
    id: icon_font_96
    size: 96
    glyphs:
      - "\U000F050F" # Temperature

# ---------- INKPLATE HARDWARE ------------

# port expander
mcp23017:
  - id: mcp23017_hub
    address: 0x20

# touch driver
ektf2232:
  interrupt_pin: GPIO36
  rts_pin:
    mcp23xxx: mcp23017_hub
    number: 10
  on_touch:
  # - deep_sleep.prevent: deep_sleep_1
  - sensor.template.publish:
      id: touchline_1
      state: !lambda 'return (float)touch.x / 3;'
  - logger.log:
      format: "touch x=%d, y=%d"
      args: ['touch.x', 'touch.y']


# drawRectangle(it, 100, 400, 500, 100, 4);
# drawRectangle(it, 100, 450, 500, 100, 4);

# backlight driver
output:
  - platform: mcp47a1
    id: dac_output


# ---------- HOME ASSISTANT INTEGRATION  ------------

switch:
  - platform: restart
    name: "Inkplate Reboot"
    id: reboot

  - platform: gpio
    id: battery_read_mosfet
    pin:
      mcp23xxx: mcp23017_hub
      number: 9
      inverted: true

  # needed to enable touchscreen!
  - platform: gpio
    name: 'Inkplate Touchscreen Enabled'
    restore_mode: ALWAYS_ON
    pin:
      mcp23xxx: mcp23017_hub
      number: 12
      inverted: true
  
  - platform: gpio
    name: 'Inkplate Backlight Enabled'
    pin:
      mcp23xxx: mcp23017_hub
      number: 11

  - platform: template
    name: "Inkplate Greyscale Mode"
    lambda: return id(inkplate_display).get_greyscale();
    turn_on_action:
      - lambda: id(inkplate_display).set_greyscale(true);
    turn_off_action:
      - lambda: id(inkplate_display).set_greyscale(false);

  - platform: template
    name: "Inkplate Partial Updating"
    lambda: return id(inkplate_display).get_partial_updating();
    turn_on_action:
      - lambda: id(inkplate_display).set_partial_updating(true);
    turn_off_action:
      - lambda: id(inkplate_display).set_partial_updating(false);

sensor:
  - platform: adc
    id: battery_voltage
    update_interval: 60s
    attenuation: 11db
    pin: 35

  # - platform: uptime
  #   id: inkplate_uptime
  #   update_interval: 0.5s
  #   on_value:
  #     if:
  #       condition:
  #         wifi.connected:
  #       then:
  #         - lambda: |-
  #             if (id(global_time_to_wifi) < 1){
  #               id(global_time_to_wifi) = x;
  #             }
  #   on_raw_value:
  #     if:
  #       condition:
  #         api.connected:
  #       then:
  #         - lambda: |-
  #             if (id(global_time_to_api) < 1){
  #               id(global_time_to_api) = x;
  #             }


  - platform: template
    name: "Inkplate Battery Voltage"
    accuracy_decimals: 3
    unit_of_measurement: "V"
    lambda: |-
      return readBattery(id(battery_read_mosfet), id(battery_voltage));

  - platform: template
    id: touchline_1
    name: "Inkplate Touchline 1"
    unit_of_measurement: "px"

  # - platform: homeassistant
  #   id: temp_outside
  #   entity_id: sensor.czujnik_temperature
  #   unit_of_measurement: "°C"
  #   device_class: "temperature"
  #   icon: "mdi:thermometer"

light:
  - platform: monochromatic
    output: dac_output
    name: "Inkplate Backlight"
    id: backlight

binary_sensor:
  - platform: status
    name: "Inkplate Status"
    id: system_status

  # Touch region definition
  - platform: ektf2232
    name: "Inkplate button"
    x_min: 100
    x_max: 200
    y_min: 200
    y_max: 300
  - platform: ektf2232
    name: "Inkplate button 2"
    x_min: 300
    x_max: 400
    y_min: 200
    y_max: 300
  - platform: ektf2232
    name: "Inkplate button 3"
    x_min: 500
    x_max: 600
    y_min: 200
    y_max: 300
    on_press:
      - mqtt.publish:
          topic: 'zigbee2mqtt/Światło Stół/set'
          payload: '{"state": "TOGGLE"}'
  - platform: ektf2232
    name: "Inkplate button 4"
    x_min: 700
    x_max: 800
    y_min: 200
    y_max: 300
  # - platform: ektf2232
  #   id: "btn1"
  #   x_min: 100
  #   x_max: 300
  #   y_min: 300
  #   y_max: 500
  #   on_press:
  #     then:
  #       - deep_sleep.enter:
  #           id: deep_sleep_1
  #           sleep_duration: 20min
  


# ---------- DISPLAY  ------------

display:
- platform: inkplate6
  model: INKPLATE_6_PLUS
  id: inkplate_display
  greyscale: false
  partial_updating: true
  update_interval: 1s
  full_update_every: 5

  ckv_pin: 32
  sph_pin: 33
  gmod_pin:
    mcp23xxx: mcp23017_hub
    number: 1
  gpio0_enable_pin:
    mcp23xxx: mcp23017_hub
    number: 8
  oe_pin:
    mcp23xxx: mcp23017_hub
    number: 0
  spv_pin:
    mcp23xxx: mcp23017_hub
    number: 2
  powerup_pin:
    mcp23xxx: mcp23017_hub
    number: 4
  wakeup_pin:
    mcp23xxx: mcp23017_hub
    number: 3
  vcom_pin:
    mcp23xxx: mcp23017_hub
    number: 5

  lambda: |-
    float current = 3.0f;
    float previous = id(global_temp_outside);
    bool freshStart = id(global_fresh_start);
    const char* TAG = "n7.inkplate";

    //id(temp_outside).state;
    // wait for sensors to be available
    if (isnan(current)){
      ESP_LOGD(TAG, "Temp sensor not yet ready.");
      id(inkplate_display).set_skip_update(true);
      return;
    }

    // only refresh if something has changed
    if (current == previous && !freshStart) {
      id(inkplate_display).set_skip_update(true);
      return;
    }
    id(global_fresh_start) = false;
    ESP_LOGD(TAG, "Value changed. Previous: %.2f, new: %.2f", previous, current);

    id(global_temp_outside) = current;

    it.fill(COLOR_ON);

    it.print(50, 50, id(icon_font_96), COLOR_OFF, TextAlign::TOP_LEFT, "\U000F050F");
    it.printf(150, 50, id(helvetica_96), COLOR_OFF, TextAlign::TOP_LEFT, "%.2f", current);

    it.print(150, 250, id(helvetica_48), COLOR_OFF, TextAlign::CENTER, "W");
    it.print(350, 250, id(helvetica_48), COLOR_OFF, TextAlign::CENTER, "P");
    it.print(550, 250, id(helvetica_48), COLOR_OFF, TextAlign::CENTER, "S");
    it.print(750, 250, id(helvetica_48), COLOR_OFF, TextAlign::CENTER, "D");

    // buttons
    drawRectangle(it, 100, 200, 100, 100, 4);
    drawRectangle(it, 300, 200, 100, 100, 4);
    drawRectangle(it, 500, 200, 100, 100, 4);
    drawRectangle(it, 700, 200, 100, 100, 4);

    // light dimmer
    drawRectangle(it, 100, 400, 500, 50, 4);
    drawRectangle(it, 100, 500, 500, 50, 4);
  
# float ttwifi = id(global_time_to_wifi);
# float ttapi = id(global_time_to_api);
# it.fill(COLOR_ON);

# if (ttwifi > 0 && ttwifi < 1000){
#   id(global_time_to_wifi) = 10000;
#   id(global_saved_ttwifi) = ttwifi;
#   it.printf(100, 100, id(helvetica_48), COLOR_OFF, TextAlign::TOP_LEFT, "Time to wifi connect: %.2f s", ttwifi);
#   return;
# }
# else if (ttapi > 0 && ttapi < 1000){
#   id(global_time_to_api) = 10000;
#   it.printf(100, 100, id(helvetica_48), COLOR_OFF, TextAlign::TOP_LEFT, "Time to wifi connect: %.2f s", id(global_saved_ttwifi));
#   it.printf(100, 200, id(helvetica_48), COLOR_OFF, TextAlign::TOP_LEFT, "Time to api connect: %.2f s", ttapi);
#   drawRectangle(it, 100, 300, 200, 200, 8);
#   return;
# }

# id(inkplate_display).set_skip_update(true);

# if (id(global_api_connected)) {
#   it.fill(COLOR_ON);
#   it.printf(100, 600, id(helvetica_48), COLOR_OFF, TextAlign::TOP_LEFT, "Time to api connect: %.2f s", id(inkplate_uptime).raw_state);
#   id(global_api_connected) = false;
#   return;
# }        

  # lambda: |-
  #   delay(2000);
  #   it.fill(COLOR_ON);

  #   // if the api is not Connected
  #   if (!id(hassio_api)->is_connected()) {
  #     // it.image(0, 0, id(loading_screen), COLOR_OFF, COLOR_ON);
  #     it.print(100, 100, id(helvetica_96), COLOR_OFF, TextAlign::TOP_LEFT, "Connecting....");
  #     return;
  #   }

  #   it.print(100, 100, id(helvetica_96), COLOR_OFF, TextAlign::TOP_LEFT, "Connected !");





  # it.print(100, 100, id(helvetica_48), COLOR_OFF, TextAlign::TOP_LEFT, "ESPHome");

  # it.strftime(400, 300, id(helvetica_48), COLOR_OFF, TextAlign::CENTER, "%Y-%m-%d", id(esptime).now());
  # it.strftime(400, 400, id(helvetica_96), COLOR_OFF, TextAlign::CENTER, "%H:%M", id(esptime).now());

  # if (id(system_status).state) {
  #   it.print(700, 100, id(helvetica_48), COLOR_OFF, TextAlign::TOP_RIGHT, "Online");
  # } else {
  #   it.print(700, 100, id(helvetica_48), COLOR_OFF, TextAlign::TOP_RIGHT, "Offline");
  # }

  # it.print(300, 500, id(icon_font_60), COLOR_OFF, TextAlign::TOP_LEFT, "\U000F050F");
  # it.printf(400, 500, id(helvetica_96), COLOR_OFF, TextAlign::TOP_LEFT, "%.2f", id(outtemp).state);

external_components:
  # - source: github://pr#3013
  #   components: ["inkplate6"]
  # - source:
  #     type: git
  #     url: https://github.com/mkocus/esphome
  #     ref: inkplate-6-plus
  #   components: ["inkplate6"]
  - source: 
      type: local
      path: "D:\\Hobby\\Esphome-mkocus\\esphome\\components"
    components: ["inkplate6", "gpio"]
  - source: github://pr#3027
    components: ["ektf2232"]
  - source: github://pr#3014
    components: ["mcp47a1"]