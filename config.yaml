# ----------- ESPHOME BASE CONFIG ------------

esphome:
  name: inkplate
  platform: ESP32
  board: esp-wrover-kit
  includes: 
    - helpers.h
  on_boot:
    - ds1307.read_time:
    - lambda: initExtended(id(mcp23017_hub), id(mcp23017_hub2));

# Enable logger, default config
logger:

# Wifi config
wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  fast_connect: true
  power_save_mode: none

  manual_ip:
    static_ip: 192.168.50.211
    gateway: 192.168.50.1
    subnet: 255.255.255.0
    dns1: 192.168.50.1

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  # ap:
  #   ssid: !secret wifi_fallback_ssid
  #   password: !secret wifi_fallback_password

# MQTT for fast sending mqtt commands
mqtt:
  broker: 192.168.50.201
  client_id: inkplate
  username: mqtt_user
  password: !secret mqtt_password

# Enable fallback hotspot portal
# captive_portal:

# Home Assistant API for easy grabbing data from HA
api:

# Enable OTA
# ota:

# Enable I2C
i2c:

deep_sleep:
  id: deep_sleep_1
  run_duration: 20s
  sleep_duration: 60min
  prevent_timeout: 2min
  wakeup_pin:           # touchscreen interupt on LOW
    number: GPIO36
    inverted: true

time:
  - platform: ds1307
    id: rtc_time
    address: 0x51
  - platform: homeassistant
    id: ha_time
    on_time_sync:
      ds1307.write_time:


# ---------- GLOBALS -------------

# variables
globals:
  - id: global_temp_outside
    type: float
    initial_value: "-1000.0f"
    restore_value: yes
  - id: global_fresh_start
    type: bool
    initial_value: "true"

# fonts
font:
  - file: "fonts/Helvetica.ttf"
    id: helvetica_96
    size: 96
  - file: "fonts/Helvetica.ttf"
    id: helvetica_48
    size: 48
  - file: "fonts/Helvetica.ttf"
    id: font_footer
    size: 28
  - file: 'fonts/materialdesignicons-webfont.ttf'
    id: font_icons
    size: 96
    glyphs:
      - "\U000F050F" # Temperature
      - "\U000F0594" # clear-night
      - "\U000F0590" # cloudy
      - "\U000F0595" # partlycloudy
      - "\U000F0591" # fog      
      - "\U000F0592" # hail
      - "\U000F0593" # lightning
      - "\U000F067E" # lightning-rainy
      - "\U000F0596" # pouring
      - "\U000F0597" # rainy
      - "\U000F0F36" # snowy
      - "\U000F067F" # snowy-rainy
      - "\U000F0599" # sunny
      - "\U000F059D" # windy
      - "\U000F059E" # windy-variant
      - "\U000F0F38" # exceptional

# ---------- INKPLATE HARDWARE ------------

mcp23017:
  - id: mcp23017_hub    # 1st port expander
    address: 0x20
  - id: mcp23017_hub2   # 2nd port expander
    address: 0x22

# touch driver
ektf2232:
  interrupt_pin: GPIO36
  rts_pin:
    mcp23xxx: mcp23017_hub
    number: 10
  on_touch:
  - deep_sleep.prevent: deep_sleep_1
  - logger.log:
      format: "touch x=%d, y=%d"
      args: ['touch.x', 'touch.y']

# backlight driver
output:
  - platform: mcp47a1
    id: dac_output


# ---------- HOME ASSISTANT INTEGRATION  ------------

switch:
  - platform: restart
    name: "Inkplate Reboot"
    id: reboot

  - platform: gpio
    id: battery_read_mosfet
    pin:
      mcp23xxx: mcp23017_hub
      number: 9
      inverted: true

  # needed to enable touchscreen!
  - platform: gpio
    name: 'Inkplate Touchscreen Enabled'
    restore_mode: ALWAYS_ON
    pin:
      mcp23xxx: mcp23017_hub
      number: 12
      inverted: true
  
  - platform: gpio
    name: 'Inkplate Backlight Enabled'
    pin:
      mcp23xxx: mcp23017_hub
      number: 11

  - platform: template
    name: "Inkplate Greyscale Mode"
    lambda: return id(inkplate_display).get_greyscale();
    turn_on_action:
      - lambda: id(inkplate_display).set_greyscale(true);
    turn_off_action:
      - lambda: id(inkplate_display).set_greyscale(false);

  - platform: template
    name: "Inkplate Partial Updating"
    lambda: return id(inkplate_display).get_partial_updating();
    turn_on_action:
      - lambda: id(inkplate_display).set_partial_updating(true);
    turn_off_action:
      - lambda: id(inkplate_display).set_partial_updating(false);

sensor:
  - platform: adc
    id: battery_voltage
    update_interval: 60s
    attenuation: 11db
    pin: 35

  - platform: template
    name: "Inkplate Battery Voltage"
    id: batt_volt
    accuracy_decimals: 3
    unit_of_measurement: "V"
    lambda: |-
      return readBattery(id(battery_read_mosfet), id(battery_voltage)) - 0.27;  // 0.27V ADC calibration

  - platform: template
    name: "Inkplate Battery"
    id: batt
    unit_of_measurement: "%"
    accuracy_decimals: 0
    device_class: battery
    lambda: |-
      int y = (1-(4.1-id(batt_volt).state)/(4.1-3.3))*100;
      if (y < 100) {return y;} else {return 100;};
    update_interval: never

  - platform: template
    id: touchline_1
    name: "Inkplate Touchline 1"
    unit_of_measurement: "px"

  - platform: homeassistant
    id: temp_outside
    entity_id: sensor.czujnik_temperature
    unit_of_measurement: "°C"
    device_class: "temperature"
    icon: "mdi:thermometer"

text_sensor:
  - platform: homeassistant
    id: fc_weather
    entity_id: weather.dom

light:
  - platform: monochromatic
    output: dac_output
    name: "Inkplate Backlight"
    id: backlight

binary_sensor:
  - platform: status
    name: "Inkplate Status"
    id: system_status

  # Touch region definition
  - platform: ektf2232
    id: btn_1
    x_min: 100
    x_max: 200
    y_min: 200
    y_max: 300
    filters:
      - delayed_off: 500ms
    on_press:
      - mqtt.publish:
          topic: 'zigbee2mqtt/Światło Wejście/set'
          payload: '{"state_left": "TOGGLE"}'
  - platform: ektf2232
    id: btn_2
    x_min: 300
    x_max: 400
    y_min: 200
    y_max: 300
    filters:
      - delayed_off: 500ms
    on_press:
      - mqtt.publish:
          topic: 'zigbee2mqtt/Światło Wejście/set'
          payload: '{"state_right": "TOGGLE"}'
  - platform: ektf2232
    id: btn_3
    x_min: 500
    x_max: 600
    y_min: 200
    y_max: 300
    filters:
      - delayed_off: 500ms
    on_press:
      - mqtt.publish:
          topic: 'zigbee2mqtt/Światło Stół/set'
          payload: '{"state": "TOGGLE"}'
  - platform: ektf2232
    id: btn_4
    x_min: 700
    x_max: 800
    y_min: 200
    y_max: 300
    filters:
      - delayed_off: 500ms
    on_press:
      - mqtt.publish:
          topic: 'zigbee2mqtt/Światło Dzieci/set'
          payload: '{"state": "TOGGLE"}'


# ---------- DISPLAY  ------------

color:
- id: black
  red: 0%
  green: 0%
  blue: 0%
- id: white
  red: 100%
  green: 100%
  blue: 100%  

graph:
- id: graph_temp
  duration: 5min
  width: 300
  height: 100
  traces:
    - sensor: temp_outside
      line_type: SOLID
      line_thickness: 6
      color: black
    - sensor: batt_volt
      line_type: DOTTED
      line_thickness: 6
      color: black
    - sensor: batt
      line_type: DASHED
      line_thickness: 6
      color: black

display:
- platform: inkplate6
  model: INKPLATE_6_PLUS
  id: inkplate_display
  greyscale: false
  partial_updating: true
  update_interval: 1s
  full_update_every: 5

  ckv_pin: 32
  sph_pin: 33
  gmod_pin:
    mcp23xxx: mcp23017_hub
    number: 1
  gpio0_enable_pin:
    mcp23xxx: mcp23017_hub
    number: 8
  oe_pin:
    mcp23xxx: mcp23017_hub
    number: 0
  spv_pin:
    mcp23xxx: mcp23017_hub
    number: 2
  powerup_pin:
    mcp23xxx: mcp23017_hub
    number: 4
  wakeup_pin:
    mcp23xxx: mcp23017_hub
    number: 3
  vcom_pin:
    mcp23xxx: mcp23017_hub
    number: 5

  lambda: |-
    #define xres 1024
    #define yres 758
    #define x_pad 10 // border padding
    #define y_pad 10 // border padding      
    #define cat_pad 85 // padding before category
    #define val_pad 70 // padding before value
    #define icon_pad 35 //padding after icons      
    #define x1n 20 //x position 1st column name
    #define x1v 25 //x position 1st column value
    #define x1i 50 //x position 1st column icon
    #define x2n xres/2 //x position 2nd column name
    #define x2v xres/2 //x position 2nd column value
    #define x2i xres/2 //x position 1st column icon

    float current = id(temp_outside).state;
    float previous = id(global_temp_outside);
    bool freshStart = id(global_fresh_start);
    const char* TAG = "n7.inkplate";  

    // wait for sensors to be available
    if (isnan(current)){
      ESP_LOGD(TAG, "Temp sensor not yet ready.");
      id(inkplate_display).set_skip_update(true);
      return;
    }

    // only refresh if something has changed
    if (current == previous && !freshStart) {
      id(inkplate_display).set_skip_update(true);
      return;
    }
    id(global_fresh_start) = false;
    ESP_LOGD(TAG, "Value changed. Previous: %.2f, new: %.2f", previous, current);

    id(global_temp_outside) = current;

    it.fill(COLOR_ON);

    //it.print(50, 50, id(font_icons), COLOR_OFF, TextAlign::TOP_LEFT, "\U000F050F");
    

    it.print(150, 250, id(helvetica_48), COLOR_OFF, TextAlign::CENTER, "W");
    it.print(350, 250, id(helvetica_48), COLOR_OFF, TextAlign::CENTER, "P");
    it.print(550, 250, id(helvetica_48), COLOR_OFF, TextAlign::CENTER, "S");
    it.print(750, 250, id(helvetica_48), COLOR_OFF, TextAlign::CENTER, "D");

    // buttons
    drawRectangle(it, 100, 200, 100, 100, 4);
    drawRectangle(it, 300, 200, 100, 100, 4);
    drawRectangle(it, 500, 200, 100, 100, 4);
    drawRectangle(it, 700, 200, 100, 100, 4);

    // light dimmer
    drawRectangle(it, 100, 400, 500, 50, 4);
    drawRectangle(it, 100, 500, 500, 50, 4);

    // weather conditions
    #define weather_icon_x 50
    #define weather_icon_y 50
    it.printf(weather_icon_x + 100, weather_icon_y, id(helvetica_96), COLOR_OFF, TextAlign::TOP_LEFT, "%.2f °C", current);

    if (id(fc_weather).state == "clear-night") {
    it.printf(weather_icon_x, weather_icon_y, id(font_icons), COLOR_OFF, TextAlign::TOP_LEFT, "\U000F0594");}
    if (id(fc_weather).state == "cloudy") {
    it.printf(weather_icon_x, weather_icon_y, id(font_icons), COLOR_OFF, TextAlign::TOP_LEFT, "\U000F0590");}
    if (id(fc_weather).state == "partlycloudy") {
    it.printf(weather_icon_x, weather_icon_y, id(font_icons), COLOR_OFF, TextAlign::TOP_LEFT, "\U000F0595");}
    if (id(fc_weather).state == "fog") {
    it.printf(weather_icon_x, weather_icon_y, id(font_icons), COLOR_OFF, TextAlign::TOP_LEFT, "\U000F0591");}
    if (id(fc_weather).state == "hail") {
    it.printf(weather_icon_x, weather_icon_y, id(font_icons), COLOR_OFF, TextAlign::TOP_LEFT, "\U000F0592");}
    if (id(fc_weather).state == "lightning") {
    it.printf(weather_icon_x, weather_icon_y, id(font_icons), COLOR_OFF, TextAlign::TOP_LEFT, "\U000F0593");}
    if (id(fc_weather).state == "lightning-rainy") {
    it.printf(weather_icon_x, weather_icon_y, id(font_icons), COLOR_OFF, TextAlign::TOP_LEFT, "\U000F067E");}
    if (id(fc_weather).state == "pouring") {
    it.printf(weather_icon_x, weather_icon_y, id(font_icons), COLOR_OFF, TextAlign::TOP_LEFT, "\U000F0596");}
    if (id(fc_weather).state == "rainy") {
    it.printf(weather_icon_x, weather_icon_y, id(font_icons), COLOR_OFF, TextAlign::TOP_LEFT, "\U000F0597");}
    if (id(fc_weather).state == "snowy") {
    it.printf(weather_icon_x, weather_icon_y, id(font_icons), COLOR_OFF, TextAlign::TOP_LEFT, "\U000F0F36");}
    if (id(fc_weather).state == "snowy-rainy") {
    it.printf(weather_icon_x, weather_icon_y, id(font_icons), COLOR_OFF, TextAlign::TOP_LEFT, "\U000F067F");}
    if (id(fc_weather).state == "sunny") {
    it.printf(weather_icon_x, weather_icon_y, id(font_icons), COLOR_OFF, TextAlign::TOP_LEFT, "\U000F0599");}
    if (id(fc_weather).state == "windy") {
    it.printf(weather_icon_x, weather_icon_y, id(font_icons), COLOR_OFF, TextAlign::TOP_LEFT, "\U000F059D");}
    if (id(fc_weather).state == "windy-variant") {
    it.printf(weather_icon_x, weather_icon_y, id(font_icons), COLOR_OFF, TextAlign::TOP_LEFT, "\U000F059E");}
    if (id(fc_weather).state == "exceptional") {
    it.printf(weather_icon_x, weather_icon_y, id(font_icons), COLOR_OFF, TextAlign::TOP_LEFT, "\U000F0F38");} 

    // footer
    int tmp = (1-(4.1-id(batt_volt).state)/(4.1-3.3))*100;
    int perc = 100;
    if (tmp < 100) perc = tmp;
    ESP_LOGD(TAG, "Battery percantage: %d%%", perc);

    it.strftime(x_pad, yres-y_pad/2, id(font_footer), COLOR_OFF, TextAlign::BASELINE_LEFT, "Aktualizacja: %H:%M", id(rtc_time).now());
    it.printf(xres-x_pad, yres-y_pad/2, id(font_footer), COLOR_OFF, TextAlign::BASELINE_RIGHT, "%.2fV/%d%%", id(batt_volt).state, perc);

    // graph test
    it.graph(600, 50, id(graph_temp), COLOR_OFF);

external_components:
  - source: 
      type: local
      path: "D:\\Hobby\\Esphome-mkocus\\esphome\\components"
    components: ["inkplate6", "gpio", "deep_sleep", "ds1307"]
  - source: github://pr#3027
    components: ["ektf2232"]